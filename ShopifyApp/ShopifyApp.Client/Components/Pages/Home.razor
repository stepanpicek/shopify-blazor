@page "/"
@using ShopifyApp.Core.Services
@using System.Web
@using ShopifyApp.Core.Settings
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILogger<Home> Logger
@inject IAppBridgeService AppBridgeService
@inject ShopifySettings ShopifySettings;
@rendermode @(new InteractiveWebAssemblyRenderMode(false))


<PageTitle>Home</PageTitle>

@if(_isLoading)
{
    <h1>Loading...</h1>
}
else
{
    <h1>Welcome auth user!</h1>
}

Welcome to your new app.

@code
{
    private bool _isLoading = true;
    [SupplyParameterFromQuery]
    public string? Shop { get; set; }
    [SupplyParameterFromQuery]
    public string? Code { get; set; }
    [SupplyParameterFromQuery]
    public string? State { get; set; }
    [SupplyParameterFromQuery]
    public int? Embedded { get; set; }
    [SupplyParameterFromQuery]
    public string? Host { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var uriBuilder = new UriBuilder(Navigation.Uri);
        var q = HttpUtility.ParseQueryString(uriBuilder.Query);
        
        if (!await AuthService.IsValidShopifyRequestAsync(q.Cast<string>().ToDictionary(s => s, s => q[s])))
        {
            //TODO: Redirect to informative page
            Navigation.NavigateTo("/error");
        }
        
        await AppBridgeService.GetOrCreateAppBridgeAsync(new AppBridgeSettings
        {
            ApiKey = ShopifySettings.ClientId,
            Host = Host
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if (!await AuthService.IsShopAuthenticatedAsync(Shop))
            {
                var token = await AppBridgeService.GetSessionToken();
                await AuthService.AuthenticateShopAsync(Shop, token);
            }
            _isLoading = false;
            StateHasChanged();
        }
    }
}
